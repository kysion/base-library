name: Release Go Module

on:
    push:
        branches:
            - main # 主分支名称，如果是master或其他名称请相应修改
    pull_request:
        types:
            - closed
        branches:
            - main # 主分支名称，如果是master或其他名称请相应修改

jobs:
    release:
        name: Create Release
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # 获取所有历史记录和标签

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: '>=1.24.0'

            - name: Run tests
              run: go test ./...

            - name: Get latest tag
              id: latest_tag
              run: |
                  echo "LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.0.0')" >> $GITHUB_ENV
                  echo "Current latest tag: ${{ env.LATEST_TAG }}"

            - name: Determine new version
              id: new_version
              run: |
                  LATEST_VERSION=${LATEST_TAG#v}
                  IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_VERSION"
                  MAJOR=${VERSION_PARTS[0]:-0}
                  MINOR=${VERSION_PARTS[1]:-0}
                  PATCH=${VERSION_PARTS[2]:-0}

                  # 增加补丁版本号
                  PATCH=$((PATCH+1))
                  NEW_VERSION="v$MAJOR.$MINOR.$PATCH"

                  echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
                  echo "New version will be: $NEW_VERSION"

            - name: Create Release
              id: create_release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ env.NEW_VERSION }}
                  name: Release ${{ env.NEW_VERSION }}
                  generate_release_notes: true
                  draft: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Update go.mod
              run: |
                  go mod tidy

            - name: Commit and push changes
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add go.mod go.sum
                  git commit -m "chore: update dependencies for release ${{ env.NEW_VERSION }}" || echo "No changes to commit"
                  git push
